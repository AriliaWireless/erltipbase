#!/bin/bash

#
#	License type: BSD 3-Clause License
#	License copy: https://github.com/Telecominfraproject/wlan-cloud-ucentralgw/blob/master/LICENSE
#
#	Created by Stephane Bourque on 2021-03-04.
#	Arilia Wireless Inc.
#

if [[ "$(which jq)" == "" ]]
then
  echo "You need the package jq installed to use this script."
  exit 1
fi

if [[ "$(which curl)" == "" ]]
then
  echo "You need the package curl installed to use this script."
  exit 1
fi

if [[ -z "${OWSEC}" || -z "${OWSEC_USERNAME}" || -z "${OWSEC_PASSWORD}" ]]
then
	echo "You must set the variables OWSEC, OWSEC_USERNAME, and OWSEC_PASSWORD in order to use this script. Something like"
	echo "export OWSEC=security.isp.com:16001"
	echo "export OWSEC_USERNAME=theusername@domain.com"
	echo "export OWSEC_PASSWORD=mytoughpassword"
	exit 1
fi

username=${OWSEC_USERNAME}
password=${OWSEC_PASSWORD}
svctype="ow_erlhello"

if [[ "${FLAGS}" == "" ]]
then
	FLAGS="-s"
fi

token=""
result_file=result.json
browser_list=(firefox sensible-browser xdg-open w3m links links2 lynx youtube-dl)
browser=""


login() {
	payload="{ \"userId\" : \"$username\" , \"password\" : \"$password\" }"
	token=$(curl ${FLAGS} -X POST -H "Content-Type: application/json" -d "$payload" "https://${OWSEC}/api/v1/oauth2" | jq -r '.access_token')
#	curl -v -X POST -H "Content-Type: application/json" -d "$payload" "https://${OWSEC}/api/v1/oauth2" | jq -r '.access_token'
	if [[ "${token}" == "" ]]
	then
		echo "Could not login. Please verify the host and username/password."
		exit 13
	fi
	echo "${token}" > token.json
	setservice
}

findbrowser() {
	if [[ "${browser}" != "" ]]
	then
		echo
	elif [[ "$(uname)" == "Darwin" ]]
	then
		browser=open
	else
		BROWSER_LIST=(firefox sensible-browser xdg-open w3m links links2 lynx youtube-dl)
		for br_name in "${browser_list[@]}"
		do
			if [[ $(which ${br_name}) != "" ]]
			then
				browser=${br_name}
				break
			fi
		done
	fi
}

setservice() {
if [ -z ${OWGW_OVERRIDE+x} ]; then
	curl  ${FLAGS} -X GET "https://${OWSEC}/api/v1/systemEndpoints" \
		-H "Content-Type: application/json" \
		-H "Accept: application/json" \
        -H "Authorization: Bearer ${token}"  > ${result_file}
	rawurl="$(cat ${result_file} | jq -r --arg svctype "$svctype" '.endpoints[] | select( .type == $svctype ) | .uri')"
	if [[ ! -z "${rawurl}" ]]; then
		proto="$(echo $rawurl | grep :// | sed -e's,^\(.*://\).*,\1,g')"
		url="$(echo ${rawurl/$proto/})"
		user="$(echo $url | grep @ | cut -d@ -f1)"
		hostport="$(echo ${url/$user@/} | cut -d/ -f1)"
		host="$(echo $hostport | sed -e 's,:.*,,g')"
		port="$(echo $hostport | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
		path="$(echo $url | grep / | cut -d/ -f2-)"
		export SVCURL=${url}
		echo "Using ${SVCURL}..."
	else
		echo "${svctype} endpoint was not found:"
		jq < ${result_file}
		exit 1
	fi
else
	export OWGW=${OWGW_OVERRIDE}
fi
}

logout() {
	curl  ${FLAGS} -X DELETE "https://${OWSEC}/api/v1/oauth2/${token}" \
		-H "Content-Type: application/json" \
		-H "Authorization: Bearer ${token}"
	rm -rf token.json
}

setloglevel() {
	payload="{ \"command\" : \"setloglevel\" , \"subsystems\" : [ { \"tag\" : \"$1\" , \"value\" : \"$2\" } ] }"
	curl  ${FLAGS} -X POST "https://${SVCURL}/api/v1/system" \
		-H "Content-Type: application/json" \
		-H "Accept: application/json" \
		-H "Authorization: Bearer ${token}" \
		-d "$payload" > ${result_file}
	jq < ${result_file}
}

getloglevels() {
	payload="{ \"command\" : \"getloglevels\" }"
	curl  ${FLAGS} -X POST "https://${SVCURL}/api/v1/system" \
		-H "Content-Type: application/json" \
		-H "Accept: application/json" \
		-H "Authorization: Bearer ${token}" \
		-d "$payload" > ${result_file}
	jq < ${result_file}
}

getloglevelnames() {
	payload="{ \"command\" : \"getloglevelnames\" }"
	curl  ${FLAGS} -X POST "https://${SVCURL}/api/v1/system" \
		-H "Content-Type: application/json" \
		-H "Accept: application/json" \
		-H "Authorization: Bearer ${token}" \
		-d "$payload" > ${result_file}
	jq < ${result_file}
}

getsubsystemnames() {
	payload="{ \"command\" : \"getsubsystemnames\" }"
	curl  ${FLAGS} -X POST "https://${SVCURL}/api/v1/system" \
		-H "Content-Type: application/json" \
		-H "Accept: application/json" \
		-H "Authorization: Bearer ${token}" \
		-d "$payload" > ${result_file}
	jq < ${result_file}
}

systeminfo() {
	curl  ${FLAGS} -X GET "https://${SVCURL}/api/v1/system?command=info" \
		-H "content-type: application/json" \
		-H "accept: application/json" \
		-H "authorization: Bearer ${token}" > ${result_file}
	jq < ${result_file}
}

reloadsubsystem() {
	payload="{ \"command\" : \"reload\", \"subsystems\" : [ \"$1\" ] }"
	curl  ${FLAGS} -X POST "https://${SVCURL}/api/v1/system" \
		-H "Content-Type: application/json" \
		-H "Accept: application/json" \
		-H "Authorization: Bearer ${token}" \
		-d "$payload"
}

wstest() {
	echo "Token:${token}"
	wscat \
		-c wss://${SVCURL}/api/v1/ws
}

notifications() {
	if [[ -z "$1" ]]
	then
			timeout=300
	else
			timeout=$1
	fi
	socket="wss://${SVCURL}/api/v1/ws"
	echo ${socket}
	if [[ "$(which wscat)" == "" ]]
	then
		echo "wscat command not found. Cannot start a websocket session."
	else
		wscat \
		--connect "${socket}" \
 		--execute "token:${token}" \
 		--wait ${timeout} \
 		--slash
	fi
}

check_response() {

    if [ -s "$1" ]; then
        ERROR_CODE="$(jq -r '.ErrorCode' < $1)"

        if [[ -n "$ERROR_CODE" && "$ERROR_CODE" != 'null' ]]; then
            echo "Error: got HTTP error code $ERROR_CODE, exiting"
            exit 1
        fi

    else
        echo "Error: result file not found or empty"
        exit 1
    fi
}

test_service() {
	echo
	echo "----------------------"
	echo "Get system information"
	echo "----------------------"
	systeminfo
	check_response $result_file

	echo
	echo "-----------------"
	echo "Get device status"
	echo "-----------------"
	SECONDS=0
	TIMEOUT_SECONDS=900

	while (( $SECONDS < $TIMEOUT_SECONDS )); do
	    getdevicestatus $1
	    check_response $result_file
	    DEVICE_STATUS="$(jq -r '.connected' < $result_file)"

	    if [ "$DEVICE_STATUS" != true ]; then
	        echo "Waiting for AP to connect, $SECONDS elapsed"
		sleep 10
	    else
	        jq < $result_file
		break
	    fi

        done

	if (( $SECONDS >= $TIMEOUT_SECONDS )); then
	    echo "Error: timed out waiting for AP to connect"
	    exit 1
	fi

	echo
	echo "--------------------"
	echo "Create network trace"
	echo "--------------------"
	trace $1 5 up
	check_response $result_file
	TRACE_STATUS="$(jq -r '.status' < $result_file)"

	if [ "$TRACE_STATUS" != 'completed' ]; then
	    echo "Error: failed to create network trace"
	    exit 1
	fi

	TRACE_ID="$(jq -r '.UUID' < $result_file)"

	echo
	echo "-----------------"
	echo "Get network trace"
	echo "-----------------"
	getfile $1 $TRACE_ID

	TRACE_RESPONSE="$(jq < $TRACE_ID.pcap 2>/dev/null)"

	if [ $? -eq 0 ]; then
	    check_response $TRACE_ID.pcap
	else
	    echo "Successfully downloaded trace to file $TRACE_ID.pcap"
	fi

	echo
	echo "-----------------------------"
	echo "Create and start RTTY session"
	echo "-----------------------------"
	rtty $1
	check_response $result_file
	RTTY_STATUS="$(curl ${FLAGS} -L -v $url 2>&1 | awk '/200/')"

	if [[ -z "$RTTY_STATUS" ]]; then
	    echo "Error: failed to start RTTY session, HTTP status code $RTTY_STATUS"
	    exit 1
	else
	    echo "RTTY session at $url was successfully started"
	fi
}

help() {
  echo "setloglevel <sys> <level>         Set the logging system level for individual subsystems."
  echo "                                  sys:ufileuploader/websocket/storage/restapi/commandmanager/auth/deviceregistry/all"
  echo "                                  level:none/fatal/critical/error/warning/notice/information/debug/trace"
  echo "getloglevels 		              Get the log levels of all the subsystems"
  echo "getloglevelnames                  Get the list of log level names possible"
  echo "getsubsystemnames                 Get the subsystems that can be used when setting log levels."
  echo "systeminfo			  Get information on the system running the service."
  echo
  echo "wstest  			  Testing the WebSocket interface."
}

shopt -s nocasematch
case "$1" in
	"help") login; help  ; logout ;;
	"login") login ;;
	"findbrowser") findbrowser; echo "Browser: ${browser}" ;;
	"setloglevel") login; setloglevel "$2" "$3"  ; logout ;;
	"getloglevels") login; getloglevels; logout ;;
	"getloglevelnames") login; getloglevelnames; logout ;;
	"getsubsystemnames") login; getsubsystemnames; logout ;;
	"reloadsubsystem") login; reloadsubsystem; logout ;;
	"systeminfo") login; systeminfo ; logout;;
	"wstest") login; wstest; logout;;
	"notifications") login; notifications "$2"; logout;;
  *) help ;;
esac

